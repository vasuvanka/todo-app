// Code generated by MockGen. DO NOT EDIT.
// Source: backend/services/database/iTodo.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vasuvanka/todo-app/backend/models"
)

// MockITodo is a mock of ITodo interface.
type MockITodo struct {
	ctrl     *gomock.Controller
	recorder *MockITodoMockRecorder
}

// MockITodoMockRecorder is the mock recorder for MockITodo.
type MockITodoMockRecorder struct {
	mock *MockITodo
}

// NewMockITodo creates a new mock instance.
func NewMockITodo(ctrl *gomock.Controller) *MockITodo {
	mock := &MockITodo{ctrl: ctrl}
	mock.recorder = &MockITodoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodo) EXPECT() *MockITodoMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockITodo) CreateTodo(arg0 models.Todo) (models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0)
	ret0, _ := ret[0].(models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockITodoMockRecorder) CreateTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockITodo)(nil).CreateTodo), arg0)
}

// GetTodoByID mocks base method.
func (m *MockITodo) GetTodoByID(id string) (models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", id)
	ret0, _ := ret[0].(models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MockITodoMockRecorder) GetTodoByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MockITodo)(nil).GetTodoByID), id)
}

// GetTodosByQuery mocks base method.
func (m *MockITodo) GetTodosByQuery(query interface{}, skip, limit int) ([]models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodosByQuery", query, skip, limit)
	ret0, _ := ret[0].([]models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodosByQuery indicates an expected call of GetTodosByQuery.
func (mr *MockITodoMockRecorder) GetTodosByQuery(query, skip, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodosByQuery", reflect.TypeOf((*MockITodo)(nil).GetTodosByQuery), query, skip, limit)
}

// GetUserTodos mocks base method.
func (m *MockITodo) GetUserTodos(userID, dirID string, skip, limit int) ([]models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTodos", userID, dirID, skip, limit)
	ret0, _ := ret[0].([]models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTodos indicates an expected call of GetUserTodos.
func (mr *MockITodoMockRecorder) GetUserTodos(userID, dirID, skip, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTodos", reflect.TypeOf((*MockITodo)(nil).GetUserTodos), userID, dirID, skip, limit)
}

// UpdateTodo mocks base method.
func (m *MockITodo) UpdateTodo(arg0 models.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockITodoMockRecorder) UpdateTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockITodo)(nil).UpdateTodo), arg0)
}
