// Code generated by MockGen. DO NOT EDIT.
// Source: backend/services/database/iDirectory.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vasuvanka/todo-app/backend/models"
)

// MockIDirectory is a mock of IDirectory interface.
type MockIDirectory struct {
	ctrl     *gomock.Controller
	recorder *MockIDirectoryMockRecorder
}

// MockIDirectoryMockRecorder is the mock recorder for MockIDirectory.
type MockIDirectoryMockRecorder struct {
	mock *MockIDirectory
}

// NewMockIDirectory creates a new mock instance.
func NewMockIDirectory(ctrl *gomock.Controller) *MockIDirectory {
	mock := &MockIDirectory{ctrl: ctrl}
	mock.recorder = &MockIDirectoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDirectory) EXPECT() *MockIDirectoryMockRecorder {
	return m.recorder
}

// CreateDir mocks base method.
func (m *MockIDirectory) CreateDir(arg0 models.Directory) (models.Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDir", arg0)
	ret0, _ := ret[0].(models.Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDir indicates an expected call of CreateDir.
func (mr *MockIDirectoryMockRecorder) CreateDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDir", reflect.TypeOf((*MockIDirectory)(nil).CreateDir), arg0)
}

// GetDirByID mocks base method.
func (m *MockIDirectory) GetDirByID(id string) (models.Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirByID", id)
	ret0, _ := ret[0].(models.Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirByID indicates an expected call of GetDirByID.
func (mr *MockIDirectoryMockRecorder) GetDirByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirByID", reflect.TypeOf((*MockIDirectory)(nil).GetDirByID), id)
}

// GetDirsByQuery mocks base method.
func (m *MockIDirectory) GetDirsByQuery(query interface{}, skip, limit int) ([]models.Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirsByQuery", query, skip, limit)
	ret0, _ := ret[0].([]models.Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirsByQuery indicates an expected call of GetDirsByQuery.
func (mr *MockIDirectoryMockRecorder) GetDirsByQuery(query, skip, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirsByQuery", reflect.TypeOf((*MockIDirectory)(nil).GetDirsByQuery), query, skip, limit)
}

// GetUserDirs mocks base method.
func (m *MockIDirectory) GetUserDirs(userID, parentID string) ([]models.Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDirs", userID, parentID)
	ret0, _ := ret[0].([]models.Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDirs indicates an expected call of GetUserDirs.
func (mr *MockIDirectoryMockRecorder) GetUserDirs(userID, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDirs", reflect.TypeOf((*MockIDirectory)(nil).GetUserDirs), userID, parentID)
}

// UpdateDir mocks base method.
func (m *MockIDirectory) UpdateDir(arg0 models.Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDir indicates an expected call of UpdateDir.
func (mr *MockIDirectoryMockRecorder) UpdateDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDir", reflect.TypeOf((*MockIDirectory)(nil).UpdateDir), arg0)
}
